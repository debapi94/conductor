// source: model/workflowtask.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var model_taskdef_pb = require('../model/taskdef_pb.js');
goog.object.extend(proto, model_taskdef_pb);
var model_subworkflowparams_pb = require('../model/subworkflowparams_pb.js');
goog.object.extend(proto, model_subworkflowparams_pb);
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.conductor.proto.WorkflowTask', null, global);
goog.exportSymbol('proto.conductor.proto.WorkflowTask.WorkflowTaskList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.proto.WorkflowTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.conductor.proto.WorkflowTask.repeatedFields_, null);
};
goog.inherits(proto.conductor.proto.WorkflowTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.proto.WorkflowTask.displayName = 'proto.conductor.proto.WorkflowTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.proto.WorkflowTask.WorkflowTaskList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.conductor.proto.WorkflowTask.WorkflowTaskList.repeatedFields_, null);
};
goog.inherits(proto.conductor.proto.WorkflowTask.WorkflowTaskList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.proto.WorkflowTask.WorkflowTaskList.displayName = 'proto.conductor.proto.WorkflowTask.WorkflowTaskList';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.conductor.proto.WorkflowTask.repeatedFields_ = [12,13,16,21,25];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.proto.WorkflowTask.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.proto.WorkflowTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.proto.WorkflowTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.proto.WorkflowTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    taskReferenceName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inputParametersMap: (f = msg.getInputParametersMap()) ? f.toObject(includeInstance, proto.google.protobuf.Value.toObject) : [],
    type: jspb.Message.getFieldWithDefault(msg, 5, ""),
    dynamicTaskNameParam: jspb.Message.getFieldWithDefault(msg, 6, ""),
    caseValueParam: jspb.Message.getFieldWithDefault(msg, 7, ""),
    caseExpression: jspb.Message.getFieldWithDefault(msg, 8, ""),
    scriptExpression: jspb.Message.getFieldWithDefault(msg, 22, ""),
    decisionCasesMap: (f = msg.getDecisionCasesMap()) ? f.toObject(includeInstance, proto.conductor.proto.WorkflowTask.WorkflowTaskList.toObject) : [],
    dynamicForkTasksParam: jspb.Message.getFieldWithDefault(msg, 10, ""),
    dynamicForkTasksInputParamName: jspb.Message.getFieldWithDefault(msg, 11, ""),
    defaultCaseList: jspb.Message.toObjectList(msg.getDefaultCaseList(),
    proto.conductor.proto.WorkflowTask.toObject, includeInstance),
    forkTasksList: jspb.Message.toObjectList(msg.getForkTasksList(),
    proto.conductor.proto.WorkflowTask.WorkflowTaskList.toObject, includeInstance),
    startDelay: jspb.Message.getFieldWithDefault(msg, 14, 0),
    subWorkflowParam: (f = msg.getSubWorkflowParam()) && model_subworkflowparams_pb.SubWorkflowParams.toObject(includeInstance, f),
    joinOnList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,
    sink: jspb.Message.getFieldWithDefault(msg, 17, ""),
    optional: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
    taskDefinition: (f = msg.getTaskDefinition()) && model_taskdef_pb.TaskDef.toObject(includeInstance, f),
    rateLimited: jspb.Message.getBooleanFieldWithDefault(msg, 20, false),
    defaultExclusiveJoinTaskList: (f = jspb.Message.getRepeatedField(msg, 21)) == null ? undefined : f,
    asyncComplete: jspb.Message.getBooleanFieldWithDefault(msg, 23, false),
    loopCondition: jspb.Message.getFieldWithDefault(msg, 24, ""),
    loopOverList: jspb.Message.toObjectList(msg.getLoopOverList(),
    proto.conductor.proto.WorkflowTask.toObject, includeInstance),
    retryCount: jspb.Message.getFieldWithDefault(msg, 26, 0),
    evaluatorType: jspb.Message.getFieldWithDefault(msg, 27, ""),
    expression: jspb.Message.getFieldWithDefault(msg, 28, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.proto.WorkflowTask}
 */
proto.conductor.proto.WorkflowTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.proto.WorkflowTask;
  return proto.conductor.proto.WorkflowTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.proto.WorkflowTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.proto.WorkflowTask}
 */
proto.conductor.proto.WorkflowTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskReferenceName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = msg.getInputParametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Value.deserializeBinaryFromReader, "", new proto.google.protobuf.Value());
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDynamicTaskNameParam(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaseValueParam(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaseExpression(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setScriptExpression(value);
      break;
    case 9:
      var value = msg.getDecisionCasesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.conductor.proto.WorkflowTask.WorkflowTaskList.deserializeBinaryFromReader, "", new proto.conductor.proto.WorkflowTask.WorkflowTaskList());
         });
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDynamicForkTasksParam(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDynamicForkTasksInputParamName(value);
      break;
    case 12:
      var value = new proto.conductor.proto.WorkflowTask;
      reader.readMessage(value,proto.conductor.proto.WorkflowTask.deserializeBinaryFromReader);
      msg.addDefaultCase(value);
      break;
    case 13:
      var value = new proto.conductor.proto.WorkflowTask.WorkflowTaskList;
      reader.readMessage(value,proto.conductor.proto.WorkflowTask.WorkflowTaskList.deserializeBinaryFromReader);
      msg.addForkTasks(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartDelay(value);
      break;
    case 15:
      var value = new model_subworkflowparams_pb.SubWorkflowParams;
      reader.readMessage(value,model_subworkflowparams_pb.SubWorkflowParams.deserializeBinaryFromReader);
      msg.setSubWorkflowParam(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.addJoinOn(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setSink(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOptional(value);
      break;
    case 19:
      var value = new model_taskdef_pb.TaskDef;
      reader.readMessage(value,model_taskdef_pb.TaskDef.deserializeBinaryFromReader);
      msg.setTaskDefinition(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRateLimited(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.addDefaultExclusiveJoinTask(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAsyncComplete(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoopCondition(value);
      break;
    case 25:
      var value = new proto.conductor.proto.WorkflowTask;
      reader.readMessage(value,proto.conductor.proto.WorkflowTask.deserializeBinaryFromReader);
      msg.addLoopOver(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRetryCount(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvaluatorType(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpression(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.proto.WorkflowTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.proto.WorkflowTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.proto.WorkflowTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.proto.WorkflowTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTaskReferenceName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Value.serializeBinaryToWriter);
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDynamicTaskNameParam();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCaseValueParam();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCaseExpression();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getScriptExpression();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getDecisionCasesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.conductor.proto.WorkflowTask.WorkflowTaskList.serializeBinaryToWriter);
  }
  f = message.getDynamicForkTasksParam();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDynamicForkTasksInputParamName();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDefaultCaseList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.conductor.proto.WorkflowTask.serializeBinaryToWriter
    );
  }
  f = message.getForkTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.conductor.proto.WorkflowTask.WorkflowTaskList.serializeBinaryToWriter
    );
  }
  f = message.getStartDelay();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getSubWorkflowParam();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      model_subworkflowparams_pb.SubWorkflowParams.serializeBinaryToWriter
    );
  }
  f = message.getJoinOnList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
  f = message.getSink();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getOptional();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getTaskDefinition();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      model_taskdef_pb.TaskDef.serializeBinaryToWriter
    );
  }
  f = message.getRateLimited();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
  f = message.getDefaultExclusiveJoinTaskList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      21,
      f
    );
  }
  f = message.getAsyncComplete();
  if (f) {
    writer.writeBool(
      23,
      f
    );
  }
  f = message.getLoopCondition();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getLoopOverList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      25,
      f,
      proto.conductor.proto.WorkflowTask.serializeBinaryToWriter
    );
  }
  f = message.getRetryCount();
  if (f !== 0) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = message.getEvaluatorType();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
  f = message.getExpression();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.conductor.proto.WorkflowTask.WorkflowTaskList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.proto.WorkflowTask.WorkflowTaskList.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.proto.WorkflowTask.WorkflowTaskList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.proto.WorkflowTask.WorkflowTaskList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.proto.WorkflowTask.WorkflowTaskList.toObject = function(includeInstance, msg) {
  var f, obj = {
    tasksList: jspb.Message.toObjectList(msg.getTasksList(),
    proto.conductor.proto.WorkflowTask.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.proto.WorkflowTask.WorkflowTaskList}
 */
proto.conductor.proto.WorkflowTask.WorkflowTaskList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.proto.WorkflowTask.WorkflowTaskList;
  return proto.conductor.proto.WorkflowTask.WorkflowTaskList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.proto.WorkflowTask.WorkflowTaskList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.proto.WorkflowTask.WorkflowTaskList}
 */
proto.conductor.proto.WorkflowTask.WorkflowTaskList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.conductor.proto.WorkflowTask;
      reader.readMessage(value,proto.conductor.proto.WorkflowTask.deserializeBinaryFromReader);
      msg.addTasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.proto.WorkflowTask.WorkflowTaskList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.proto.WorkflowTask.WorkflowTaskList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.proto.WorkflowTask.WorkflowTaskList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.proto.WorkflowTask.WorkflowTaskList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.conductor.proto.WorkflowTask.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WorkflowTask tasks = 1;
 * @return {!Array<!proto.conductor.proto.WorkflowTask>}
 */
proto.conductor.proto.WorkflowTask.WorkflowTaskList.prototype.getTasksList = function() {
  return /** @type{!Array<!proto.conductor.proto.WorkflowTask>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.conductor.proto.WorkflowTask, 1));
};


/**
 * @param {!Array<!proto.conductor.proto.WorkflowTask>} value
 * @return {!proto.conductor.proto.WorkflowTask.WorkflowTaskList} returns this
*/
proto.conductor.proto.WorkflowTask.WorkflowTaskList.prototype.setTasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.conductor.proto.WorkflowTask=} opt_value
 * @param {number=} opt_index
 * @return {!proto.conductor.proto.WorkflowTask}
 */
proto.conductor.proto.WorkflowTask.WorkflowTaskList.prototype.addTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.conductor.proto.WorkflowTask, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.conductor.proto.WorkflowTask.WorkflowTaskList} returns this
 */
proto.conductor.proto.WorkflowTask.WorkflowTaskList.prototype.clearTasksList = function() {
  return this.setTasksList([]);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.conductor.proto.WorkflowTask.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string task_reference_name = 2;
 * @return {string}
 */
proto.conductor.proto.WorkflowTask.prototype.getTaskReferenceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setTaskReferenceName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.conductor.proto.WorkflowTask.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, google.protobuf.Value> input_parameters = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Value>}
 */
proto.conductor.proto.WorkflowTask.prototype.getInputParametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Value>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.google.protobuf.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.clearInputParametersMap = function() {
  this.getInputParametersMap().clear();
  return this;};


/**
 * optional string type = 5;
 * @return {string}
 */
proto.conductor.proto.WorkflowTask.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string dynamic_task_name_param = 6;
 * @return {string}
 */
proto.conductor.proto.WorkflowTask.prototype.getDynamicTaskNameParam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setDynamicTaskNameParam = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string case_value_param = 7;
 * @return {string}
 */
proto.conductor.proto.WorkflowTask.prototype.getCaseValueParam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setCaseValueParam = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string case_expression = 8;
 * @return {string}
 */
proto.conductor.proto.WorkflowTask.prototype.getCaseExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setCaseExpression = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string script_expression = 22;
 * @return {string}
 */
proto.conductor.proto.WorkflowTask.prototype.getScriptExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setScriptExpression = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * map<string, WorkflowTaskList> decision_cases = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.conductor.proto.WorkflowTask.WorkflowTaskList>}
 */
proto.conductor.proto.WorkflowTask.prototype.getDecisionCasesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.conductor.proto.WorkflowTask.WorkflowTaskList>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      proto.conductor.proto.WorkflowTask.WorkflowTaskList));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.clearDecisionCasesMap = function() {
  this.getDecisionCasesMap().clear();
  return this;};


/**
 * optional string dynamic_fork_tasks_param = 10;
 * @return {string}
 */
proto.conductor.proto.WorkflowTask.prototype.getDynamicForkTasksParam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setDynamicForkTasksParam = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string dynamic_fork_tasks_input_param_name = 11;
 * @return {string}
 */
proto.conductor.proto.WorkflowTask.prototype.getDynamicForkTasksInputParamName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setDynamicForkTasksInputParamName = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * repeated WorkflowTask default_case = 12;
 * @return {!Array<!proto.conductor.proto.WorkflowTask>}
 */
proto.conductor.proto.WorkflowTask.prototype.getDefaultCaseList = function() {
  return /** @type{!Array<!proto.conductor.proto.WorkflowTask>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.conductor.proto.WorkflowTask, 12));
};


/**
 * @param {!Array<!proto.conductor.proto.WorkflowTask>} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
*/
proto.conductor.proto.WorkflowTask.prototype.setDefaultCaseList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.conductor.proto.WorkflowTask=} opt_value
 * @param {number=} opt_index
 * @return {!proto.conductor.proto.WorkflowTask}
 */
proto.conductor.proto.WorkflowTask.prototype.addDefaultCase = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.conductor.proto.WorkflowTask, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.clearDefaultCaseList = function() {
  return this.setDefaultCaseList([]);
};


/**
 * repeated WorkflowTaskList fork_tasks = 13;
 * @return {!Array<!proto.conductor.proto.WorkflowTask.WorkflowTaskList>}
 */
proto.conductor.proto.WorkflowTask.prototype.getForkTasksList = function() {
  return /** @type{!Array<!proto.conductor.proto.WorkflowTask.WorkflowTaskList>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.conductor.proto.WorkflowTask.WorkflowTaskList, 13));
};


/**
 * @param {!Array<!proto.conductor.proto.WorkflowTask.WorkflowTaskList>} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
*/
proto.conductor.proto.WorkflowTask.prototype.setForkTasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.conductor.proto.WorkflowTask.WorkflowTaskList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.conductor.proto.WorkflowTask.WorkflowTaskList}
 */
proto.conductor.proto.WorkflowTask.prototype.addForkTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.conductor.proto.WorkflowTask.WorkflowTaskList, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.clearForkTasksList = function() {
  return this.setForkTasksList([]);
};


/**
 * optional int32 start_delay = 14;
 * @return {number}
 */
proto.conductor.proto.WorkflowTask.prototype.getStartDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setStartDelay = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional SubWorkflowParams sub_workflow_param = 15;
 * @return {?proto.conductor.proto.SubWorkflowParams}
 */
proto.conductor.proto.WorkflowTask.prototype.getSubWorkflowParam = function() {
  return /** @type{?proto.conductor.proto.SubWorkflowParams} */ (
    jspb.Message.getWrapperField(this, model_subworkflowparams_pb.SubWorkflowParams, 15));
};


/**
 * @param {?proto.conductor.proto.SubWorkflowParams|undefined} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
*/
proto.conductor.proto.WorkflowTask.prototype.setSubWorkflowParam = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.clearSubWorkflowParam = function() {
  return this.setSubWorkflowParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conductor.proto.WorkflowTask.prototype.hasSubWorkflowParam = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * repeated string join_on = 16;
 * @return {!Array<string>}
 */
proto.conductor.proto.WorkflowTask.prototype.getJoinOnList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 16));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setJoinOnList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.addJoinOn = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.clearJoinOnList = function() {
  return this.setJoinOnList([]);
};


/**
 * optional string sink = 17;
 * @return {string}
 */
proto.conductor.proto.WorkflowTask.prototype.getSink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setSink = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional bool optional = 18;
 * @return {boolean}
 */
proto.conductor.proto.WorkflowTask.prototype.getOptional = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setOptional = function(value) {
  return jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional TaskDef task_definition = 19;
 * @return {?proto.conductor.proto.TaskDef}
 */
proto.conductor.proto.WorkflowTask.prototype.getTaskDefinition = function() {
  return /** @type{?proto.conductor.proto.TaskDef} */ (
    jspb.Message.getWrapperField(this, model_taskdef_pb.TaskDef, 19));
};


/**
 * @param {?proto.conductor.proto.TaskDef|undefined} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
*/
proto.conductor.proto.WorkflowTask.prototype.setTaskDefinition = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.clearTaskDefinition = function() {
  return this.setTaskDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conductor.proto.WorkflowTask.prototype.hasTaskDefinition = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional bool rate_limited = 20;
 * @return {boolean}
 */
proto.conductor.proto.WorkflowTask.prototype.getRateLimited = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 20, false));
};


/**
 * @param {boolean} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setRateLimited = function(value) {
  return jspb.Message.setProto3BooleanField(this, 20, value);
};


/**
 * repeated string default_exclusive_join_task = 21;
 * @return {!Array<string>}
 */
proto.conductor.proto.WorkflowTask.prototype.getDefaultExclusiveJoinTaskList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 21));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setDefaultExclusiveJoinTaskList = function(value) {
  return jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.addDefaultExclusiveJoinTask = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.clearDefaultExclusiveJoinTaskList = function() {
  return this.setDefaultExclusiveJoinTaskList([]);
};


/**
 * optional bool async_complete = 23;
 * @return {boolean}
 */
proto.conductor.proto.WorkflowTask.prototype.getAsyncComplete = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setAsyncComplete = function(value) {
  return jspb.Message.setProto3BooleanField(this, 23, value);
};


/**
 * optional string loop_condition = 24;
 * @return {string}
 */
proto.conductor.proto.WorkflowTask.prototype.getLoopCondition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setLoopCondition = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};


/**
 * repeated WorkflowTask loop_over = 25;
 * @return {!Array<!proto.conductor.proto.WorkflowTask>}
 */
proto.conductor.proto.WorkflowTask.prototype.getLoopOverList = function() {
  return /** @type{!Array<!proto.conductor.proto.WorkflowTask>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.conductor.proto.WorkflowTask, 25));
};


/**
 * @param {!Array<!proto.conductor.proto.WorkflowTask>} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
*/
proto.conductor.proto.WorkflowTask.prototype.setLoopOverList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 25, value);
};


/**
 * @param {!proto.conductor.proto.WorkflowTask=} opt_value
 * @param {number=} opt_index
 * @return {!proto.conductor.proto.WorkflowTask}
 */
proto.conductor.proto.WorkflowTask.prototype.addLoopOver = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 25, opt_value, proto.conductor.proto.WorkflowTask, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.clearLoopOverList = function() {
  return this.setLoopOverList([]);
};


/**
 * optional int32 retry_count = 26;
 * @return {number}
 */
proto.conductor.proto.WorkflowTask.prototype.getRetryCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setRetryCount = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional string evaluator_type = 27;
 * @return {string}
 */
proto.conductor.proto.WorkflowTask.prototype.getEvaluatorType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setEvaluatorType = function(value) {
  return jspb.Message.setProto3StringField(this, 27, value);
};


/**
 * optional string expression = 28;
 * @return {string}
 */
proto.conductor.proto.WorkflowTask.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.proto.WorkflowTask} returns this
 */
proto.conductor.proto.WorkflowTask.prototype.setExpression = function(value) {
  return jspb.Message.setProto3StringField(this, 28, value);
};


goog.object.extend(exports, proto.conductor.proto);
