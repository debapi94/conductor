// source: service/task_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var model_taskexeclog_pb = require('../model/taskexeclog_pb.js');
goog.object.extend(proto, model_taskexeclog_pb);
var model_taskresult_pb = require('../model/taskresult_pb.js');
goog.object.extend(proto, model_taskresult_pb);
var model_tasksummary_pb = require('../model/tasksummary_pb.js');
goog.object.extend(proto, model_tasksummary_pb);
var model_task_pb = require('../model/task_pb.js');
goog.object.extend(proto, model_task_pb);
var model_search_pb = require('../model/search_pb.js');
goog.object.extend(proto, model_search_pb);
goog.exportSymbol('proto.conductor.grpc.tasks.AddLogRequest', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.AddLogResponse', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.BatchPollRequest', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.GetTaskLogsRequest', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.GetTaskLogsResponse', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.GetTaskRequest', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.GetTaskResponse', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.PollRequest', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.PollResponse', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.QueueAllInfoRequest', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.QueueAllInfoResponse', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.QueueInfoRequest', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.QueueInfoResponse', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.QueueSizesRequest', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.QueueSizesResponse', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.TaskSearchResult', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.TaskSummarySearchResult', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.UpdateTaskRequest', null, global);
goog.exportSymbol('proto.conductor.grpc.tasks.UpdateTaskResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.PollRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.PollRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.PollRequest.displayName = 'proto.conductor.grpc.tasks.PollRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.PollResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.PollResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.PollResponse.displayName = 'proto.conductor.grpc.tasks.PollResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.BatchPollRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.BatchPollRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.BatchPollRequest.displayName = 'proto.conductor.grpc.tasks.BatchPollRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.UpdateTaskRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.UpdateTaskRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.UpdateTaskRequest.displayName = 'proto.conductor.grpc.tasks.UpdateTaskRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.UpdateTaskResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.UpdateTaskResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.UpdateTaskResponse.displayName = 'proto.conductor.grpc.tasks.UpdateTaskResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.AddLogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.AddLogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.AddLogRequest.displayName = 'proto.conductor.grpc.tasks.AddLogRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.AddLogResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.AddLogResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.AddLogResponse.displayName = 'proto.conductor.grpc.tasks.AddLogResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.GetTaskLogsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.GetTaskLogsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.GetTaskLogsRequest.displayName = 'proto.conductor.grpc.tasks.GetTaskLogsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.GetTaskLogsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.conductor.grpc.tasks.GetTaskLogsResponse.repeatedFields_, null);
};
goog.inherits(proto.conductor.grpc.tasks.GetTaskLogsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.GetTaskLogsResponse.displayName = 'proto.conductor.grpc.tasks.GetTaskLogsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.GetTaskRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.GetTaskRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.GetTaskRequest.displayName = 'proto.conductor.grpc.tasks.GetTaskRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.GetTaskResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.GetTaskResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.GetTaskResponse.displayName = 'proto.conductor.grpc.tasks.GetTaskResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.QueueSizesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.conductor.grpc.tasks.QueueSizesRequest.repeatedFields_, null);
};
goog.inherits(proto.conductor.grpc.tasks.QueueSizesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.QueueSizesRequest.displayName = 'proto.conductor.grpc.tasks.QueueSizesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.QueueSizesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.QueueSizesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.QueueSizesResponse.displayName = 'proto.conductor.grpc.tasks.QueueSizesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.QueueInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.QueueInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.QueueInfoRequest.displayName = 'proto.conductor.grpc.tasks.QueueInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.QueueInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.QueueInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.QueueInfoResponse.displayName = 'proto.conductor.grpc.tasks.QueueInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.QueueAllInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.QueueAllInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.QueueAllInfoRequest.displayName = 'proto.conductor.grpc.tasks.QueueAllInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.QueueAllInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.QueueAllInfoResponse.displayName = 'proto.conductor.grpc.tasks.QueueAllInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.displayName = 'proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo.displayName = 'proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.TaskSummarySearchResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.conductor.grpc.tasks.TaskSummarySearchResult.repeatedFields_, null);
};
goog.inherits(proto.conductor.grpc.tasks.TaskSummarySearchResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.TaskSummarySearchResult.displayName = 'proto.conductor.grpc.tasks.TaskSummarySearchResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.tasks.TaskSearchResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.conductor.grpc.tasks.TaskSearchResult.repeatedFields_, null);
};
goog.inherits(proto.conductor.grpc.tasks.TaskSearchResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.tasks.TaskSearchResult.displayName = 'proto.conductor.grpc.tasks.TaskSearchResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.PollRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.PollRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.PollRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.PollRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    workerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.PollRequest}
 */
proto.conductor.grpc.tasks.PollRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.PollRequest;
  return proto.conductor.grpc.tasks.PollRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.PollRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.PollRequest}
 */
proto.conductor.grpc.tasks.PollRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.PollRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.PollRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.PollRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.PollRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWorkerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string task_type = 1;
 * @return {string}
 */
proto.conductor.grpc.tasks.PollRequest.prototype.getTaskType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.grpc.tasks.PollRequest} returns this
 */
proto.conductor.grpc.tasks.PollRequest.prototype.setTaskType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string worker_id = 2;
 * @return {string}
 */
proto.conductor.grpc.tasks.PollRequest.prototype.getWorkerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.grpc.tasks.PollRequest} returns this
 */
proto.conductor.grpc.tasks.PollRequest.prototype.setWorkerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string domain = 3;
 * @return {string}
 */
proto.conductor.grpc.tasks.PollRequest.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.grpc.tasks.PollRequest} returns this
 */
proto.conductor.grpc.tasks.PollRequest.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.PollResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.PollResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.PollResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.PollResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    task: (f = msg.getTask()) && model_task_pb.Task.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.PollResponse}
 */
proto.conductor.grpc.tasks.PollResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.PollResponse;
  return proto.conductor.grpc.tasks.PollResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.PollResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.PollResponse}
 */
proto.conductor.grpc.tasks.PollResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_task_pb.Task;
      reader.readMessage(value,model_task_pb.Task.deserializeBinaryFromReader);
      msg.setTask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.PollResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.PollResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.PollResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.PollResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTask();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      model_task_pb.Task.serializeBinaryToWriter
    );
  }
};


/**
 * optional conductor.proto.Task task = 1;
 * @return {?proto.conductor.proto.Task}
 */
proto.conductor.grpc.tasks.PollResponse.prototype.getTask = function() {
  return /** @type{?proto.conductor.proto.Task} */ (
    jspb.Message.getWrapperField(this, model_task_pb.Task, 1));
};


/**
 * @param {?proto.conductor.proto.Task|undefined} value
 * @return {!proto.conductor.grpc.tasks.PollResponse} returns this
*/
proto.conductor.grpc.tasks.PollResponse.prototype.setTask = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.conductor.grpc.tasks.PollResponse} returns this
 */
proto.conductor.grpc.tasks.PollResponse.prototype.clearTask = function() {
  return this.setTask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conductor.grpc.tasks.PollResponse.prototype.hasTask = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.BatchPollRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.BatchPollRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.BatchPollRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.BatchPollRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    workerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 3, ""),
    count: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timeout: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.BatchPollRequest}
 */
proto.conductor.grpc.tasks.BatchPollRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.BatchPollRequest;
  return proto.conductor.grpc.tasks.BatchPollRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.BatchPollRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.BatchPollRequest}
 */
proto.conductor.grpc.tasks.BatchPollRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.BatchPollRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.BatchPollRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.BatchPollRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.BatchPollRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWorkerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string task_type = 1;
 * @return {string}
 */
proto.conductor.grpc.tasks.BatchPollRequest.prototype.getTaskType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.grpc.tasks.BatchPollRequest} returns this
 */
proto.conductor.grpc.tasks.BatchPollRequest.prototype.setTaskType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string worker_id = 2;
 * @return {string}
 */
proto.conductor.grpc.tasks.BatchPollRequest.prototype.getWorkerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.grpc.tasks.BatchPollRequest} returns this
 */
proto.conductor.grpc.tasks.BatchPollRequest.prototype.setWorkerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string domain = 3;
 * @return {string}
 */
proto.conductor.grpc.tasks.BatchPollRequest.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.grpc.tasks.BatchPollRequest} returns this
 */
proto.conductor.grpc.tasks.BatchPollRequest.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 count = 4;
 * @return {number}
 */
proto.conductor.grpc.tasks.BatchPollRequest.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.conductor.grpc.tasks.BatchPollRequest} returns this
 */
proto.conductor.grpc.tasks.BatchPollRequest.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 timeout = 5;
 * @return {number}
 */
proto.conductor.grpc.tasks.BatchPollRequest.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.conductor.grpc.tasks.BatchPollRequest} returns this
 */
proto.conductor.grpc.tasks.BatchPollRequest.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.UpdateTaskRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.UpdateTaskRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.UpdateTaskRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.UpdateTaskRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && model_taskresult_pb.TaskResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.UpdateTaskRequest}
 */
proto.conductor.grpc.tasks.UpdateTaskRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.UpdateTaskRequest;
  return proto.conductor.grpc.tasks.UpdateTaskRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.UpdateTaskRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.UpdateTaskRequest}
 */
proto.conductor.grpc.tasks.UpdateTaskRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_taskresult_pb.TaskResult;
      reader.readMessage(value,model_taskresult_pb.TaskResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.UpdateTaskRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.UpdateTaskRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.UpdateTaskRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.UpdateTaskRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      model_taskresult_pb.TaskResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional conductor.proto.TaskResult result = 1;
 * @return {?proto.conductor.proto.TaskResult}
 */
proto.conductor.grpc.tasks.UpdateTaskRequest.prototype.getResult = function() {
  return /** @type{?proto.conductor.proto.TaskResult} */ (
    jspb.Message.getWrapperField(this, model_taskresult_pb.TaskResult, 1));
};


/**
 * @param {?proto.conductor.proto.TaskResult|undefined} value
 * @return {!proto.conductor.grpc.tasks.UpdateTaskRequest} returns this
*/
proto.conductor.grpc.tasks.UpdateTaskRequest.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.conductor.grpc.tasks.UpdateTaskRequest} returns this
 */
proto.conductor.grpc.tasks.UpdateTaskRequest.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conductor.grpc.tasks.UpdateTaskRequest.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.UpdateTaskResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.UpdateTaskResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.UpdateTaskResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.UpdateTaskResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.UpdateTaskResponse}
 */
proto.conductor.grpc.tasks.UpdateTaskResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.UpdateTaskResponse;
  return proto.conductor.grpc.tasks.UpdateTaskResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.UpdateTaskResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.UpdateTaskResponse}
 */
proto.conductor.grpc.tasks.UpdateTaskResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.UpdateTaskResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.UpdateTaskResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.UpdateTaskResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.UpdateTaskResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string task_id = 1;
 * @return {string}
 */
proto.conductor.grpc.tasks.UpdateTaskResponse.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.grpc.tasks.UpdateTaskResponse} returns this
 */
proto.conductor.grpc.tasks.UpdateTaskResponse.prototype.setTaskId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.AddLogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.AddLogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.AddLogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.AddLogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    log: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.AddLogRequest}
 */
proto.conductor.grpc.tasks.AddLogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.AddLogRequest;
  return proto.conductor.grpc.tasks.AddLogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.AddLogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.AddLogRequest}
 */
proto.conductor.grpc.tasks.AddLogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.AddLogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.AddLogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.AddLogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.AddLogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLog();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string task_id = 1;
 * @return {string}
 */
proto.conductor.grpc.tasks.AddLogRequest.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.grpc.tasks.AddLogRequest} returns this
 */
proto.conductor.grpc.tasks.AddLogRequest.prototype.setTaskId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string log = 2;
 * @return {string}
 */
proto.conductor.grpc.tasks.AddLogRequest.prototype.getLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.grpc.tasks.AddLogRequest} returns this
 */
proto.conductor.grpc.tasks.AddLogRequest.prototype.setLog = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.AddLogResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.AddLogResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.AddLogResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.AddLogResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.AddLogResponse}
 */
proto.conductor.grpc.tasks.AddLogResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.AddLogResponse;
  return proto.conductor.grpc.tasks.AddLogResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.AddLogResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.AddLogResponse}
 */
proto.conductor.grpc.tasks.AddLogResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.AddLogResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.AddLogResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.AddLogResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.AddLogResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.GetTaskLogsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.GetTaskLogsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.GetTaskLogsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.GetTaskLogsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.GetTaskLogsRequest}
 */
proto.conductor.grpc.tasks.GetTaskLogsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.GetTaskLogsRequest;
  return proto.conductor.grpc.tasks.GetTaskLogsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.GetTaskLogsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.GetTaskLogsRequest}
 */
proto.conductor.grpc.tasks.GetTaskLogsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.GetTaskLogsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.GetTaskLogsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.GetTaskLogsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.GetTaskLogsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string task_id = 1;
 * @return {string}
 */
proto.conductor.grpc.tasks.GetTaskLogsRequest.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.grpc.tasks.GetTaskLogsRequest} returns this
 */
proto.conductor.grpc.tasks.GetTaskLogsRequest.prototype.setTaskId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.conductor.grpc.tasks.GetTaskLogsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.GetTaskLogsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.GetTaskLogsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.GetTaskLogsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.GetTaskLogsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    model_taskexeclog_pb.TaskExecLog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.GetTaskLogsResponse}
 */
proto.conductor.grpc.tasks.GetTaskLogsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.GetTaskLogsResponse;
  return proto.conductor.grpc.tasks.GetTaskLogsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.GetTaskLogsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.GetTaskLogsResponse}
 */
proto.conductor.grpc.tasks.GetTaskLogsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_taskexeclog_pb.TaskExecLog;
      reader.readMessage(value,model_taskexeclog_pb.TaskExecLog.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.GetTaskLogsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.GetTaskLogsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.GetTaskLogsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.GetTaskLogsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      model_taskexeclog_pb.TaskExecLog.serializeBinaryToWriter
    );
  }
};


/**
 * repeated conductor.proto.TaskExecLog logs = 1;
 * @return {!Array<!proto.conductor.proto.TaskExecLog>}
 */
proto.conductor.grpc.tasks.GetTaskLogsResponse.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.conductor.proto.TaskExecLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, model_taskexeclog_pb.TaskExecLog, 1));
};


/**
 * @param {!Array<!proto.conductor.proto.TaskExecLog>} value
 * @return {!proto.conductor.grpc.tasks.GetTaskLogsResponse} returns this
*/
proto.conductor.grpc.tasks.GetTaskLogsResponse.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.conductor.proto.TaskExecLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.conductor.proto.TaskExecLog}
 */
proto.conductor.grpc.tasks.GetTaskLogsResponse.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.conductor.proto.TaskExecLog, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.conductor.grpc.tasks.GetTaskLogsResponse} returns this
 */
proto.conductor.grpc.tasks.GetTaskLogsResponse.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.GetTaskRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.GetTaskRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.GetTaskRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.GetTaskRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.GetTaskRequest}
 */
proto.conductor.grpc.tasks.GetTaskRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.GetTaskRequest;
  return proto.conductor.grpc.tasks.GetTaskRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.GetTaskRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.GetTaskRequest}
 */
proto.conductor.grpc.tasks.GetTaskRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.GetTaskRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.GetTaskRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.GetTaskRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.GetTaskRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string task_id = 1;
 * @return {string}
 */
proto.conductor.grpc.tasks.GetTaskRequest.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.grpc.tasks.GetTaskRequest} returns this
 */
proto.conductor.grpc.tasks.GetTaskRequest.prototype.setTaskId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.GetTaskResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.GetTaskResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.GetTaskResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.GetTaskResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    task: (f = msg.getTask()) && model_task_pb.Task.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.GetTaskResponse}
 */
proto.conductor.grpc.tasks.GetTaskResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.GetTaskResponse;
  return proto.conductor.grpc.tasks.GetTaskResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.GetTaskResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.GetTaskResponse}
 */
proto.conductor.grpc.tasks.GetTaskResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_task_pb.Task;
      reader.readMessage(value,model_task_pb.Task.deserializeBinaryFromReader);
      msg.setTask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.GetTaskResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.GetTaskResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.GetTaskResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.GetTaskResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTask();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      model_task_pb.Task.serializeBinaryToWriter
    );
  }
};


/**
 * optional conductor.proto.Task task = 1;
 * @return {?proto.conductor.proto.Task}
 */
proto.conductor.grpc.tasks.GetTaskResponse.prototype.getTask = function() {
  return /** @type{?proto.conductor.proto.Task} */ (
    jspb.Message.getWrapperField(this, model_task_pb.Task, 1));
};


/**
 * @param {?proto.conductor.proto.Task|undefined} value
 * @return {!proto.conductor.grpc.tasks.GetTaskResponse} returns this
*/
proto.conductor.grpc.tasks.GetTaskResponse.prototype.setTask = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.conductor.grpc.tasks.GetTaskResponse} returns this
 */
proto.conductor.grpc.tasks.GetTaskResponse.prototype.clearTask = function() {
  return this.setTask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conductor.grpc.tasks.GetTaskResponse.prototype.hasTask = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.conductor.grpc.tasks.QueueSizesRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.QueueSizesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.QueueSizesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.QueueSizesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueSizesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskTypesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.QueueSizesRequest}
 */
proto.conductor.grpc.tasks.QueueSizesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.QueueSizesRequest;
  return proto.conductor.grpc.tasks.QueueSizesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.QueueSizesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.QueueSizesRequest}
 */
proto.conductor.grpc.tasks.QueueSizesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTaskTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.QueueSizesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.QueueSizesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.QueueSizesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueSizesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string task_types = 1;
 * @return {!Array<string>}
 */
proto.conductor.grpc.tasks.QueueSizesRequest.prototype.getTaskTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.conductor.grpc.tasks.QueueSizesRequest} returns this
 */
proto.conductor.grpc.tasks.QueueSizesRequest.prototype.setTaskTypesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.conductor.grpc.tasks.QueueSizesRequest} returns this
 */
proto.conductor.grpc.tasks.QueueSizesRequest.prototype.addTaskTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.conductor.grpc.tasks.QueueSizesRequest} returns this
 */
proto.conductor.grpc.tasks.QueueSizesRequest.prototype.clearTaskTypesList = function() {
  return this.setTaskTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.QueueSizesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.QueueSizesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.QueueSizesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueSizesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    queueForTaskMap: (f = msg.getQueueForTaskMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.QueueSizesResponse}
 */
proto.conductor.grpc.tasks.QueueSizesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.QueueSizesResponse;
  return proto.conductor.grpc.tasks.QueueSizesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.QueueSizesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.QueueSizesResponse}
 */
proto.conductor.grpc.tasks.QueueSizesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getQueueForTaskMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.QueueSizesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.QueueSizesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.QueueSizesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueSizesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueueForTaskMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * map<string, int32> queue_for_task = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.conductor.grpc.tasks.QueueSizesResponse.prototype.getQueueForTaskMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.conductor.grpc.tasks.QueueSizesResponse} returns this
 */
proto.conductor.grpc.tasks.QueueSizesResponse.prototype.clearQueueForTaskMap = function() {
  this.getQueueForTaskMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.QueueInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.QueueInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.QueueInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.QueueInfoRequest}
 */
proto.conductor.grpc.tasks.QueueInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.QueueInfoRequest;
  return proto.conductor.grpc.tasks.QueueInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.QueueInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.QueueInfoRequest}
 */
proto.conductor.grpc.tasks.QueueInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.QueueInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.QueueInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.QueueInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.QueueInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.QueueInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.QueueInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    queuesMap: (f = msg.getQueuesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.QueueInfoResponse}
 */
proto.conductor.grpc.tasks.QueueInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.QueueInfoResponse;
  return proto.conductor.grpc.tasks.QueueInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.QueueInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.QueueInfoResponse}
 */
proto.conductor.grpc.tasks.QueueInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getQueuesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.QueueInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.QueueInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.QueueInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueuesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);
  }
};


/**
 * map<string, int64> queues = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.conductor.grpc.tasks.QueueInfoResponse.prototype.getQueuesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.conductor.grpc.tasks.QueueInfoResponse} returns this
 */
proto.conductor.grpc.tasks.QueueInfoResponse.prototype.clearQueuesMap = function() {
  this.getQueuesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.QueueAllInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.QueueAllInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.QueueAllInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueAllInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.QueueAllInfoRequest}
 */
proto.conductor.grpc.tasks.QueueAllInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.QueueAllInfoRequest;
  return proto.conductor.grpc.tasks.QueueAllInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.QueueAllInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.QueueAllInfoRequest}
 */
proto.conductor.grpc.tasks.QueueAllInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.QueueAllInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.QueueAllInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.QueueAllInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueAllInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.QueueAllInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.QueueAllInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    queuesMap: (f = msg.getQueuesMap()) ? f.toObject(includeInstance, proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.QueueAllInfoResponse}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.QueueAllInfoResponse;
  return proto.conductor.grpc.tasks.QueueAllInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.QueueAllInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.QueueAllInfoResponse}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getQueuesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo.deserializeBinaryFromReader, "", new proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.QueueAllInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.QueueAllInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueuesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo.serializeBinaryToWriter);
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uacked: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo;
  return proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUacked(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUacked();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 size = 1;
 * @return {number}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo} returns this
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 uacked = 2;
 * @return {number}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.prototype.getUacked = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo} returns this
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.prototype.setUacked = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardsMap: (f = msg.getShardsMap()) ? f.toObject(includeInstance, proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo;
  return proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getShardsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.deserializeBinaryFromReader, "", new proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo.serializeBinaryToWriter);
  }
};


/**
 * map<string, ShardInfo> shards = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo>}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo.prototype.getShardsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.conductor.grpc.tasks.QueueAllInfoResponse.ShardInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo} returns this
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo.prototype.clearShardsMap = function() {
  this.getShardsMap().clear();
  return this;};


/**
 * map<string, QueueInfo> queues = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo>}
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.prototype.getQueuesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.conductor.grpc.tasks.QueueAllInfoResponse.QueueInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.conductor.grpc.tasks.QueueAllInfoResponse} returns this
 */
proto.conductor.grpc.tasks.QueueAllInfoResponse.prototype.clearQueuesMap = function() {
  this.getQueuesMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.conductor.grpc.tasks.TaskSummarySearchResult.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.TaskSummarySearchResult.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.TaskSummarySearchResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.TaskSummarySearchResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.TaskSummarySearchResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalHits: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    model_tasksummary_pb.TaskSummary.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.TaskSummarySearchResult}
 */
proto.conductor.grpc.tasks.TaskSummarySearchResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.TaskSummarySearchResult;
  return proto.conductor.grpc.tasks.TaskSummarySearchResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.TaskSummarySearchResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.TaskSummarySearchResult}
 */
proto.conductor.grpc.tasks.TaskSummarySearchResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalHits(value);
      break;
    case 2:
      var value = new model_tasksummary_pb.TaskSummary;
      reader.readMessage(value,model_tasksummary_pb.TaskSummary.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.TaskSummarySearchResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.TaskSummarySearchResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.TaskSummarySearchResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.TaskSummarySearchResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalHits();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      model_tasksummary_pb.TaskSummary.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 total_hits = 1;
 * @return {number}
 */
proto.conductor.grpc.tasks.TaskSummarySearchResult.prototype.getTotalHits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.conductor.grpc.tasks.TaskSummarySearchResult} returns this
 */
proto.conductor.grpc.tasks.TaskSummarySearchResult.prototype.setTotalHits = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated conductor.proto.TaskSummary results = 2;
 * @return {!Array<!proto.conductor.proto.TaskSummary>}
 */
proto.conductor.grpc.tasks.TaskSummarySearchResult.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.conductor.proto.TaskSummary>} */ (
    jspb.Message.getRepeatedWrapperField(this, model_tasksummary_pb.TaskSummary, 2));
};


/**
 * @param {!Array<!proto.conductor.proto.TaskSummary>} value
 * @return {!proto.conductor.grpc.tasks.TaskSummarySearchResult} returns this
*/
proto.conductor.grpc.tasks.TaskSummarySearchResult.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.conductor.proto.TaskSummary=} opt_value
 * @param {number=} opt_index
 * @return {!proto.conductor.proto.TaskSummary}
 */
proto.conductor.grpc.tasks.TaskSummarySearchResult.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.conductor.proto.TaskSummary, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.conductor.grpc.tasks.TaskSummarySearchResult} returns this
 */
proto.conductor.grpc.tasks.TaskSummarySearchResult.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.conductor.grpc.tasks.TaskSearchResult.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.tasks.TaskSearchResult.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.tasks.TaskSearchResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.tasks.TaskSearchResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.TaskSearchResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalHits: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    model_task_pb.Task.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.tasks.TaskSearchResult}
 */
proto.conductor.grpc.tasks.TaskSearchResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.tasks.TaskSearchResult;
  return proto.conductor.grpc.tasks.TaskSearchResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.tasks.TaskSearchResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.tasks.TaskSearchResult}
 */
proto.conductor.grpc.tasks.TaskSearchResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalHits(value);
      break;
    case 2:
      var value = new model_task_pb.Task;
      reader.readMessage(value,model_task_pb.Task.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.tasks.TaskSearchResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.tasks.TaskSearchResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.tasks.TaskSearchResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.tasks.TaskSearchResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalHits();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      model_task_pb.Task.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 total_hits = 1;
 * @return {number}
 */
proto.conductor.grpc.tasks.TaskSearchResult.prototype.getTotalHits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.conductor.grpc.tasks.TaskSearchResult} returns this
 */
proto.conductor.grpc.tasks.TaskSearchResult.prototype.setTotalHits = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated conductor.proto.Task results = 2;
 * @return {!Array<!proto.conductor.proto.Task>}
 */
proto.conductor.grpc.tasks.TaskSearchResult.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.conductor.proto.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, model_task_pb.Task, 2));
};


/**
 * @param {!Array<!proto.conductor.proto.Task>} value
 * @return {!proto.conductor.grpc.tasks.TaskSearchResult} returns this
*/
proto.conductor.grpc.tasks.TaskSearchResult.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.conductor.proto.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.conductor.proto.Task}
 */
proto.conductor.grpc.tasks.TaskSearchResult.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.conductor.proto.Task, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.conductor.grpc.tasks.TaskSearchResult} returns this
 */
proto.conductor.grpc.tasks.TaskSearchResult.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


goog.object.extend(exports, proto.conductor.grpc.tasks);
