// source: service/event_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var model_eventhandler_pb = require('../model/eventhandler_pb.js');
goog.object.extend(proto, model_eventhandler_pb);
goog.exportSymbol('proto.conductor.grpc.events.AddEventHandlerRequest', null, global);
goog.exportSymbol('proto.conductor.grpc.events.AddEventHandlerResponse', null, global);
goog.exportSymbol('proto.conductor.grpc.events.GetEventHandlersForEventRequest', null, global);
goog.exportSymbol('proto.conductor.grpc.events.GetEventHandlersRequest', null, global);
goog.exportSymbol('proto.conductor.grpc.events.RemoveEventHandlerRequest', null, global);
goog.exportSymbol('proto.conductor.grpc.events.RemoveEventHandlerResponse', null, global);
goog.exportSymbol('proto.conductor.grpc.events.UpdateEventHandlerRequest', null, global);
goog.exportSymbol('proto.conductor.grpc.events.UpdateEventHandlerResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.events.AddEventHandlerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.events.AddEventHandlerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.events.AddEventHandlerRequest.displayName = 'proto.conductor.grpc.events.AddEventHandlerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.events.AddEventHandlerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.events.AddEventHandlerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.events.AddEventHandlerResponse.displayName = 'proto.conductor.grpc.events.AddEventHandlerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.events.UpdateEventHandlerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.events.UpdateEventHandlerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.events.UpdateEventHandlerRequest.displayName = 'proto.conductor.grpc.events.UpdateEventHandlerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.events.UpdateEventHandlerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.events.UpdateEventHandlerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.events.UpdateEventHandlerResponse.displayName = 'proto.conductor.grpc.events.UpdateEventHandlerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.events.RemoveEventHandlerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.events.RemoveEventHandlerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.events.RemoveEventHandlerRequest.displayName = 'proto.conductor.grpc.events.RemoveEventHandlerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.events.RemoveEventHandlerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.events.RemoveEventHandlerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.events.RemoveEventHandlerResponse.displayName = 'proto.conductor.grpc.events.RemoveEventHandlerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.events.GetEventHandlersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.events.GetEventHandlersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.events.GetEventHandlersRequest.displayName = 'proto.conductor.grpc.events.GetEventHandlersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conductor.grpc.events.GetEventHandlersForEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conductor.grpc.events.GetEventHandlersForEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conductor.grpc.events.GetEventHandlersForEventRequest.displayName = 'proto.conductor.grpc.events.GetEventHandlersForEventRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.events.AddEventHandlerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.events.AddEventHandlerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.events.AddEventHandlerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.AddEventHandlerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    handler: (f = msg.getHandler()) && model_eventhandler_pb.EventHandler.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.events.AddEventHandlerRequest}
 */
proto.conductor.grpc.events.AddEventHandlerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.events.AddEventHandlerRequest;
  return proto.conductor.grpc.events.AddEventHandlerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.events.AddEventHandlerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.events.AddEventHandlerRequest}
 */
proto.conductor.grpc.events.AddEventHandlerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_eventhandler_pb.EventHandler;
      reader.readMessage(value,model_eventhandler_pb.EventHandler.deserializeBinaryFromReader);
      msg.setHandler(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.events.AddEventHandlerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.events.AddEventHandlerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.events.AddEventHandlerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.AddEventHandlerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHandler();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      model_eventhandler_pb.EventHandler.serializeBinaryToWriter
    );
  }
};


/**
 * optional conductor.proto.EventHandler handler = 1;
 * @return {?proto.conductor.proto.EventHandler}
 */
proto.conductor.grpc.events.AddEventHandlerRequest.prototype.getHandler = function() {
  return /** @type{?proto.conductor.proto.EventHandler} */ (
    jspb.Message.getWrapperField(this, model_eventhandler_pb.EventHandler, 1));
};


/**
 * @param {?proto.conductor.proto.EventHandler|undefined} value
 * @return {!proto.conductor.grpc.events.AddEventHandlerRequest} returns this
*/
proto.conductor.grpc.events.AddEventHandlerRequest.prototype.setHandler = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.conductor.grpc.events.AddEventHandlerRequest} returns this
 */
proto.conductor.grpc.events.AddEventHandlerRequest.prototype.clearHandler = function() {
  return this.setHandler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conductor.grpc.events.AddEventHandlerRequest.prototype.hasHandler = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.events.AddEventHandlerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.events.AddEventHandlerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.events.AddEventHandlerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.AddEventHandlerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.events.AddEventHandlerResponse}
 */
proto.conductor.grpc.events.AddEventHandlerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.events.AddEventHandlerResponse;
  return proto.conductor.grpc.events.AddEventHandlerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.events.AddEventHandlerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.events.AddEventHandlerResponse}
 */
proto.conductor.grpc.events.AddEventHandlerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.events.AddEventHandlerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.events.AddEventHandlerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.events.AddEventHandlerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.AddEventHandlerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.events.UpdateEventHandlerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.events.UpdateEventHandlerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.events.UpdateEventHandlerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.UpdateEventHandlerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    handler: (f = msg.getHandler()) && model_eventhandler_pb.EventHandler.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.events.UpdateEventHandlerRequest}
 */
proto.conductor.grpc.events.UpdateEventHandlerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.events.UpdateEventHandlerRequest;
  return proto.conductor.grpc.events.UpdateEventHandlerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.events.UpdateEventHandlerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.events.UpdateEventHandlerRequest}
 */
proto.conductor.grpc.events.UpdateEventHandlerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_eventhandler_pb.EventHandler;
      reader.readMessage(value,model_eventhandler_pb.EventHandler.deserializeBinaryFromReader);
      msg.setHandler(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.events.UpdateEventHandlerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.events.UpdateEventHandlerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.events.UpdateEventHandlerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.UpdateEventHandlerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHandler();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      model_eventhandler_pb.EventHandler.serializeBinaryToWriter
    );
  }
};


/**
 * optional conductor.proto.EventHandler handler = 1;
 * @return {?proto.conductor.proto.EventHandler}
 */
proto.conductor.grpc.events.UpdateEventHandlerRequest.prototype.getHandler = function() {
  return /** @type{?proto.conductor.proto.EventHandler} */ (
    jspb.Message.getWrapperField(this, model_eventhandler_pb.EventHandler, 1));
};


/**
 * @param {?proto.conductor.proto.EventHandler|undefined} value
 * @return {!proto.conductor.grpc.events.UpdateEventHandlerRequest} returns this
*/
proto.conductor.grpc.events.UpdateEventHandlerRequest.prototype.setHandler = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.conductor.grpc.events.UpdateEventHandlerRequest} returns this
 */
proto.conductor.grpc.events.UpdateEventHandlerRequest.prototype.clearHandler = function() {
  return this.setHandler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conductor.grpc.events.UpdateEventHandlerRequest.prototype.hasHandler = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.events.UpdateEventHandlerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.events.UpdateEventHandlerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.events.UpdateEventHandlerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.UpdateEventHandlerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.events.UpdateEventHandlerResponse}
 */
proto.conductor.grpc.events.UpdateEventHandlerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.events.UpdateEventHandlerResponse;
  return proto.conductor.grpc.events.UpdateEventHandlerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.events.UpdateEventHandlerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.events.UpdateEventHandlerResponse}
 */
proto.conductor.grpc.events.UpdateEventHandlerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.events.UpdateEventHandlerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.events.UpdateEventHandlerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.events.UpdateEventHandlerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.UpdateEventHandlerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.events.RemoveEventHandlerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.events.RemoveEventHandlerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.events.RemoveEventHandlerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.RemoveEventHandlerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.events.RemoveEventHandlerRequest}
 */
proto.conductor.grpc.events.RemoveEventHandlerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.events.RemoveEventHandlerRequest;
  return proto.conductor.grpc.events.RemoveEventHandlerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.events.RemoveEventHandlerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.events.RemoveEventHandlerRequest}
 */
proto.conductor.grpc.events.RemoveEventHandlerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.events.RemoveEventHandlerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.events.RemoveEventHandlerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.events.RemoveEventHandlerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.RemoveEventHandlerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.conductor.grpc.events.RemoveEventHandlerRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.grpc.events.RemoveEventHandlerRequest} returns this
 */
proto.conductor.grpc.events.RemoveEventHandlerRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.events.RemoveEventHandlerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.events.RemoveEventHandlerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.events.RemoveEventHandlerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.RemoveEventHandlerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.events.RemoveEventHandlerResponse}
 */
proto.conductor.grpc.events.RemoveEventHandlerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.events.RemoveEventHandlerResponse;
  return proto.conductor.grpc.events.RemoveEventHandlerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.events.RemoveEventHandlerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.events.RemoveEventHandlerResponse}
 */
proto.conductor.grpc.events.RemoveEventHandlerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.events.RemoveEventHandlerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.events.RemoveEventHandlerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.events.RemoveEventHandlerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.RemoveEventHandlerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.events.GetEventHandlersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.events.GetEventHandlersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.events.GetEventHandlersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.GetEventHandlersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.events.GetEventHandlersRequest}
 */
proto.conductor.grpc.events.GetEventHandlersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.events.GetEventHandlersRequest;
  return proto.conductor.grpc.events.GetEventHandlersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.events.GetEventHandlersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.events.GetEventHandlersRequest}
 */
proto.conductor.grpc.events.GetEventHandlersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.events.GetEventHandlersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.events.GetEventHandlersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.events.GetEventHandlersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.GetEventHandlersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conductor.grpc.events.GetEventHandlersForEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.conductor.grpc.events.GetEventHandlersForEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conductor.grpc.events.GetEventHandlersForEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.GetEventHandlersForEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: jspb.Message.getFieldWithDefault(msg, 1, ""),
    activeOnly: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conductor.grpc.events.GetEventHandlersForEventRequest}
 */
proto.conductor.grpc.events.GetEventHandlersForEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conductor.grpc.events.GetEventHandlersForEventRequest;
  return proto.conductor.grpc.events.GetEventHandlersForEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conductor.grpc.events.GetEventHandlersForEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conductor.grpc.events.GetEventHandlersForEventRequest}
 */
proto.conductor.grpc.events.GetEventHandlersForEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvent(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActiveOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conductor.grpc.events.GetEventHandlersForEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conductor.grpc.events.GetEventHandlersForEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conductor.grpc.events.GetEventHandlersForEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conductor.grpc.events.GetEventHandlersForEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActiveOnly();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string event = 1;
 * @return {string}
 */
proto.conductor.grpc.events.GetEventHandlersForEventRequest.prototype.getEvent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.conductor.grpc.events.GetEventHandlersForEventRequest} returns this
 */
proto.conductor.grpc.events.GetEventHandlersForEventRequest.prototype.setEvent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool active_only = 2;
 * @return {boolean}
 */
proto.conductor.grpc.events.GetEventHandlersForEventRequest.prototype.getActiveOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.conductor.grpc.events.GetEventHandlersForEventRequest} returns this
 */
proto.conductor.grpc.events.GetEventHandlersForEventRequest.prototype.setActiveOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


goog.object.extend(exports, proto.conductor.grpc.events);
